---
title: "Class 13: RNASeq Mini Project"
author: "Kaitlyn Powell"
format: pdf
---


The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1.


## RNA Seq Data Input

Again I need two things:

- countData 
- colData


```{r}
colData <- read.csv("GSE37704_metadata.csv", row.names = 1)
head(colData)
```

```{r}
countData <- read.csv("GSE37704_featurecounts.csv", row.names = 1)
head(countData)
```

There is an unwanted first column "length" in the countData. I will need to remove this first before going on to further analysis:

> Q. Complete the code below to remove the troublesome first column from countData

In order to remove the troublesome first column from countData, the code that can be used is: 
`countData <- as.matrix(countData[,-1])`
`head(countData)`.

```{r}
countData <- as.matrix(countData[,-1])
head(countData)
```

OR

```{r}
#counts <- countData[,-1]
#head(counts)
```

> Q. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

The code belwo shows how we filtered countData to exclude genes where we have 0 read count across all samples. This leaves us with 15,975 genes.

```{r}
to.keep <- rowSums(countData) > 0
counts <- countData[to.keep,]
head(counts)
```

How many genes do we have left?

```{r}
nrow(counts)
```


```{r}
all(colnames(counts) == rownames(colData))
```

Time to use DESeq

```{r}
library(DESeq2)
```

1st step Setup the object required by DESeq

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = colData,
                              design = ~condition)
```

```{r}
dds <-DESeq(dds)
res <- results(dds)
```

```{r}
head(res)
```

> Q. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

About 27% of genes are downregulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```


# Volcano Plot

```{r}
plot(res$log2FoldChange, -log(res$padj))
```

I want to add some color. Take a fold-change threshold of -2/+2 and an alphas p-adj (p-value) threshold of 0.05.

> Q. Improve this plot by completing the below code, which adds color and axis labels

The plot that has colors and axis labels added is shown below.

```{r}
# Make a color vector for all genes
mycols <- rep("gray", nrow(res) )

# Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2 ] <- "red"

# Color blue those with adjusted p-value less than 0.01
#  and absolute fold change more than 2
inds <- (abs(res$pvalue) < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)" )

plot(res$log2FoldChange, -log(res$padj), col = mycols)
abline(v=c(-2,+2))
abline(h= -log(0.05))
```

#  Adding gene annotation

> Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

The `mapIDs()` function used to add SYMBOL, ENTREZID, and GENENAME annotation to our results are shown below.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")
```

```{r}
res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")
```

```{r}
res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

```

```{r}
head(res, 10)
```

Save my results so far to a CSV file.

> Q. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```

## Pathway Analysis

Again we will use the `gage()` package and function with a focus first on KEGG and GO.

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]
```


```{r}
# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

Recall that `gage()` wants only a vector of importance as input that has names in ENTREZ ID format.

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
# Look at the first few down (less) pathways
head(keggres$less, 5)
```

Generate a colored pathway figure for hsa04110 Cell cycle

```{r}
library(pathview)
```


```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

![](hsa04110.pathview.png)


```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```

![](hsa04110.pathview.pdf)

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]
```

```{r}
# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

![](hsa04740.pathview.png)

![](hsa04640.pathview.png)

![](hsa00140.pathview.png)

![](hsa04630.pathview.png)

![](hsa04976.pathview.png)


> Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

```{r}
## Focus on top 5 down-regulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

![](hsa04110.pathview.png)

![](hsa03030.pathview.png)

![](hsa03013.pathview.png)

![](hsa04114.pathview.png)

![](hsa03440.pathview.png)

## Section 3. Gene Ontology (GO)

```{r}
data(go.sets.hs)
data(go.subs.hs)
```

```{r}
# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]
```

```{r}
gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)
```

```{r}
lapply(gobpres, head)
```

## Section 4. Reactome Analysis

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

> Q: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

The pathway that has the most significant "Entities p-value" is "Endosomal/Vacuolar pathway". The most significant pathways listed in this search do not match the previous KEGG results. Factors that could cause differences between the two methods could include that the reactome and KEGG databases prioritize different factors in their searches when calculating the entities p-value.




