---
title: "Class 07: Machine Learning 1"
author: "Kaitlyn Powell"
format: pdf
---

# K-menas clustering

First we will test how this method works in R with some made up data.

```{r}
x <- rnorm(10000)
hist(x)
```

Let's make some numbers centered on -3

```{r}
rev(c("a", "b", "c"))
```


```{r}
tmp <- c(rnorm(30, -3), rnorm(30, +3))

x <- cbind(x=  tmp, y= rev(tmp))
plot(x)
```

Now let's see how `kmeans()` works  with this data...

```{r}
km <- kmeans(x, centers =  2, nstart= 20)
km
```

```{r}
km$centers
```

> Q.  How many points are in each cluster?

```{r}
km$size
```

> Q. What 'component' of your result object details

- cluster size?
- cluster assignment/membership?
- cluster center?
      
```{r}
km$cluster
```

```{r}
km$centers
```

> Q. Plot x colored by the kmeans clsuter assignment and add cluster centers as blue points

```{r}
plot(x, col=km$cluster)
points(km$centers, col= "blue", pch=15, cex =1.5)
```

# Hierarchical Clustering

The `hclust()` function in R performs hierarchical clustering.

The `hclust()` function requires an input distance matrix, which  I can get from the `dist()` function.

```{r}
hc <- hclust(dist(x))
hc
```

There is a plot() method for hclust objects.

```{r}
plot(hc)
```

Now to get my cluster membership vector  I need to "cut" the tree to yield separate branches" with the "leaves" on each branch being our cluster. To do this we use the `cutree()` function.

```{r}
cutree(hc, h=8)
```

Use `cutree()` with a k=2.
```{r}
grps <- cutree(hc, k=2)
```

A plot of our data colored by our hclust grps.

```{r}
plot(x, col=grps)
```

# Principal Component Analysis (PCA)

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
x
```

## Part 1: PCA of UK Food Data

> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

There are 17 rows and  5 columns in the data frame named x. R functions that can be used in order to answer this question include `nrow()`, `ncol()`, or `dim()`.

## Complete the following code to find out how many rows and columns are in x?

```{r}
dim(x)
```

## Preview the first 6 rows
```{r}
head(x)
```

# Note how the minus indexing works
```{r}
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```
```{r}
dim(x)
```

```{r}
x <- read.csv(url, row.names=1)
head(x)
```
> Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

I prefer the second approach to solving the 'row-names problem' mentioned above because it is easier to see what variables I am working with. The first approach seems to leave more room for error because it seems that it would be easy to mis-type a number.

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```

> Q3: Changing what optional argument in the above barplot() function results in the following plot?

Changing the `beside` argument to "FALSE" in the barplot() function results in this plot.

```{r}
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```

> Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

This code plots all possible pairs of countries against each other in which it shows all plot options, using different pairs of countries as each axis. Each point on the plot represents a specific food group. If a given point lies on the diagonal for a given plot, it indicates that the same amount of a certain food group is consumed by the two countries being compared. If a point lies above the diagonal, it means that the country on the y-axis consumes more of that food group. Similarly, if a point lies below the diagonal, it means that the country on the x-axis consumes more of that food group.

```{r}
pairs(x, col=rainbow(10), pch=16)
```

> Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

In terms of this data-set, the main difference between N. Ireland and the other countries of the UK is that, they tend to consume the most food groups in different amounts  (either more or  less) when compared to  the  other countries.

While this is kind of useful it takes work to dig into the details here to find out what is different in these countries.

## PCA to the rescue
Principal Component Analysis (PCA for short) can be a big help in these cases where we have lots of things that are being measured in a dataset.

The main PCA function in base R is called `prcomp()`.

The `prcomp()` function wants as the input of the transpose of our food matrix/table/data frame.

```{r}
pca <- prcomp(t(x))
summary(pca)
```

The above result shows that PCA captures 67% of the total variance in the original data in one PC and 96.5% in two PCs.

```{r}
attributes(pca)
```

```{r}
head(pca$x)
```

Let's plot our main results.

```{r}
plot(pca$x[,1], pca$x[,2], col=c("orange", 
                                 "red",
                                 "blue",
                                 "darkgreen"))
```


> Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

# Plot PC1 vs PC2

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
```

> Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x), col=c("orange", 
                                 "red",
                                 "blue",
                                 "darkgreen"))
```

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v
```

## or the second row here...

```{r}
z <- summary(pca)
z$importance
```

```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")
```

## Lets focus on PC1 as it accounts for > 90% of variance 

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```

> Q9: Generate a similar ‘loadings plot’ for PC2. What two food groups feature prominantely and what does PC2 maninly tell us about?


PC2 mainly features the food groups, fresh potatoes and soft drinks.

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
```

## The inbuilt biplot() can be useful for small datasets 

```{r}
biplot(pca)
```

## Part 2: PCA of RNA-Seq Data

Here we apply PCA to some example RNA-Seq data of a know-out experiment.

First we read the dataset:

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

> Q10: How many genes and samples are in this data set?

There are 100 genes and 10 samples in this data set.

```{r}
dim(rna.data)
nrow(rna.data)
ncol(rna.data)
```

## Again we have to take the transpose of our data 

```{r}
pca <- prcomp(t(rna.data), scale=TRUE)
```

## Simple un polished plot of pc1 and pc2

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

```{r}
summary(pca)
```

```{r}
plot(pca, main="Quick scree plot")
```

## Variance captured per PC 

```{r}
pca.var <- pca$sdev^2
```

## Percent variance is often more informative to look at 

```{r}
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per
```

```{r}
barplot(pca.var.per, main="Scree Plot", 
        names.arg = paste0("PC", 1:10),
        xlab="Principal Component", ylab="Percent Variation")
```

## A vector of colors for wt and ko samples

```{r}
colvec <- colnames(rna.data)
colvec[grep("wt", colvec)] <- "red"
colvec[grep("ko", colvec)] <- "blue"

plot(pca$x[,1], pca$x[,2], col=colvec, pch=16,
     xlab=paste0("PC1 (", pca.var.per[1], "%)"),
     ylab=paste0("PC2 (", pca.var.per[2], "%)"))

text(pca$x[,1], pca$x[,2], labels = colnames(rna.data), pos=c(rep(4,5), rep(2,5)))
```

# Using ggplot

```{r}
library(ggplot2)

df <- as.data.frame(pca$x)

# Our first basic plot
ggplot(df) + 
  aes(PC1, PC2) + 
  geom_point()
```

# Add a 'wt' and 'ko' "condition" column

```{r}
df$samples <- colnames(rna.data) 
df$condition <- substr(colnames(rna.data),1,2)

p <- ggplot(df) + 
        aes(PC1, PC2, label=samples, col=condition) + 
        geom_label(show.legend = FALSE)
p
```
```{r}
p + labs(title="PCA of RNASeq Data",
       subtitle = "PC1 clealy seperates wild-type from knock-out samples",
       x=paste0("PC1 (", pca.var.per[1], "%)"),
       y=paste0("PC2 (", pca.var.per[2], "%)"),
       caption="Class example data") +
     theme_bw()
```

# Optional: Gene loadings

```{r}
loading_scores <- pca$rotation[,1]
```


## Find the top 10 measurements (genes) that contribute
## most to PC1 in either direction (+ or -)

```{r}
gene_scores <- abs(loading_scores) 
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
```

## show the names of the top 10 genes

```{r}
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes 
```


